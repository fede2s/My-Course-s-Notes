En mayuscula escribo sentencias de MySQL y en minuscula nombres de variables, tablas, etc. 
Ejemplo de comentario /* Esto es un comentario en mySql */

/*-----------------------------------------------------Comandos basicos---------------------------------------------------------------------*/
CREATE DATABASE mi_base_de_datos;		/*Creo una base de datos llamada "mi_base_de_datos" */
SHOW DATABASES;				/* Muestra la lista de las bases de datos */
SELECT DATABASE();			/* Muestra que base de datos estoy usando de la lista */
USE mi_base_de_datos;			/* Le digo que use la base de datos llamada "mi_base_de_datos" */
SHOW TABLES;				/* Muestra las tablas que hay en la base de datos en uso */

CREATE TABLE mi_tabla (
	id INT UNSIGNED,
	nombre CHAR(25),
	nacimiento DATE
);	/*  Creo una tabla llamada "mi_tabla" con 3 columnas   */

INSERT INTO mi_tabla (id, nombre) VALUES (156,"Fede"),(157,"Pepito"),(57,"Hugo");      /* inserto 3 registros */


/*------------------------Ejemplos de llaves primarias-------------------------*/
	id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,	
	nombre CHAR(50) PRIMARY KEY,	
	

/*------------------------Ejemplo de llaves foraneas---------------------------*/
	FOREIGN KEY (columna) REFERENCES tabla_referencia (llave_primaria),


/*-----------------------------------------------------Comandos basicos---------------------------------------------------------------------*/
SHOW COLUMNS FROM mi_tabla;		/*Muestra que tipo de dato almacena cada columna de "mi_tabla"*/
SELECT * FROM mi_tabla;			/*Imprime todos los datos de todas las columnas de "mi_tabla" */
SELECT * FROM mi_tabla \G;			/*Imprime todos los registros, pero en formato distinto  */
SELECT id,nombre FROM mi_tabla;    /* Imprime solamente los datos de las columnas "id" y "nombre" de "mi_tabla"*/
SELECT DISTINCT nombre FROM mi_tabla;		/* Imprime solo los nombres sin mostrar repetidos */
SELECT * FROM mi_tabla ORDER BY nacimiento		/* Imprime segun el orden de la columna nacimiento */
SELECT * FROM mi_tabla WHERE nombre = "Fede";	/* imprimo todos los registros con nombre Fede*/
SELECT columnas FROM tabla WHERE condiciones;
/*Con las condiciones podemos usar operadores...
					AND
					OR
					 IS
					NOT
					BETWEEN ... AND ....
					IN
					 >
					<	
					=
					>=
					<=
					!=
					<>
					<=>
					IS NULL es equivalente a <=>NULL
					!= es equivalente a <>
					BETWEEN sirve para fechas, numeros y otros
					...y tambien parentesis 	*/

SELECT * FORM mi_tabla WHERE nombre IS NULL; 		/* imprimo todos los registros sin nombre */
SELECT * FORM mi_tabla WHERE nombre IS NOT NULL; 	/* imprimo todos los registros con nombre valido */
SELECT * FROM mi_tabla WHERE nombre IS NULL AND id > 28;	/*Combino 2 condiciones para imprimir */
SELECT * FROM mi_tabla WHERE nacimiento BETWEEN '2001-01-01' AND '2021-01-01'	/* rango de fechas */
/*	El resultado de estas dos sentencias es el mismo, pero usando IN es mucho mas facil de 
	mantener el codigo, es mas facil de escribir y la busqueda es mas rapida

	SELECT * FROM mi_tabla WHERE 	nombre = 'Fede' OR
					nombre = 'Pepe' OR
					nombre = 'Flor';

	SELECT * FROM mi_tabla WHERE nombre IN ('Fede', 'Pepe', 'Flor');
*/
SELECT * FROM id AS numero_de_usuario, nombre AS usuario FROM mi_tabla AS usuarios;
SELECT 2*5 AS resultado_de_2_por_5;	/*Con AS puedo asignarle un alias a cualquier columna o tabla*/
	
/*---------------------------------------------------------------------------------------------------------------------------------------------
       Para alterar una tabla usamos ALTER TABLE que lo podemos combinar con...
	ADD 		agrega columna o caracteristicas a una ya existente (restricciones, llaves, etc)	
	DROP COLUMN 	borra columna
	RENAME 		renombra la tabla
	ORDER BY  	ordena la tabla
	MODIFY 	 	modifica tipo de dato de columna
	TRUNCATE	borra registros de una columna 
*/
ALTER TABLE mi_tabla DROP COLUMN nacimiento;	/*	borro columna		*/
ALTER TABLE mi_tabla ADD genero ENUM('M','F','T');	/*	agrego columna		*/
ALTER TABLE mi_tabla ADD PRIMARY KEY(id);		/*	convierto id en llave primaria 	*/
ALTER TABLE esta_tabla ADD FOREIGN KEY(llave_foranea_de_esta_tabla) REFERENCES otra_tabla(llave_primaria);
ALTER TABLE mi_tabla RENAME usuarios;	
ALTER TABLE usuarios MODIFY nombre VARCHAR(50);	/*modifico nombre para que guarde mas caracteres */


/*---------------------------------------------------------------------------------------------------------------------------------------------
       Para actualizar un registro vamos a usar la sentencia UPDATE acompañada de la sentencia SET

	UPDATE tabla SET columna1 = 'nuevo valor' , columna2 ='nuevo valor' WHERE condicion ;

       Si yo no especifico una condición, va a cambiar los valores de todos los registros, así que lo ideal
       en un caso así sería especificar que registro quiero actualizar usando la sentencia WHERE y la llave
       primaria así solo es un solo registro el que se actualice y no son varios por tener datos repetidos.

       Ejemplo: el ciudadano con dni 39775245 quiere cambiarse de nombre a Federico.
	UPDATE ciudadanos SET nombre = 'Federico' WHERE dni = 39772545;
*/

/*---------------------------------------------------------------------------------------------------------------------------------------------
       Para eliminar registros uso la sentencia DELETE FROM
	DELETE FROM tabla WHERE llave_primaria = 'registro que quiero borrar';

       ¡Si no uso WHERE, me va a borrar todos los registros de la tabla!

       Si tengo que borrar un registro de una tabla que tiene relacion con otra tabla, primero tendria que
       borrar los registros relacionados para que no haya un problema en la integridad referencial.
	DELETE FROM tabla2 WHERE llave_foranea = 1;
	DELETE FROM tabla1 WHERE llave_primaria =1;
       Esto se puede solucionar habilitando la eliminacion en cascada usando el constraint ON DELETE CASCADE en la             definicion (CREATE) de la tabla2 o con un ALTER TABLE asi cuando elimine un registro de la tabla1 se van a borrar
       todos los registros relacionados en la tabla 2.
      FOREIGN KEY (llave_foranea) REFERENCES tabla1(llave_primaria) ON DELETE CASCADE
      ALTER TABLE tabla ADD FOREIGN KEY (llave_foranea) REFERENCES tabla1(llave_primaria) ON DELETE CASCADE;
       	
*/

/*---------------------------------------------------------------------------------------------------------------------------------------------
			Funciones sobre strings

	SELECT CONCAT(nombre, ' ', apellido) FROM tabla;
	SELECT CONCAT(nombre, ' ', apellido) AS nombre_completo FROM tabla;
	
	SELECT LENGTH("Cuantos caracteres estare usando?");
	SELECT * FROM tabla WHERE LENGTH (nombre) >7;