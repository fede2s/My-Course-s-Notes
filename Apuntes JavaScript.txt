Lenguaje case sensitive
Lenguaje de tipado dinámico (los tipos de datos pueden cambiar)
Reservo variables con let, anteriormente se reservaba con var, pero da problemas en bucles.
Guardo constantes con const, el identificador por convención va en mayúsculas

Si uso los operadores numero++ dentro de un console.log, primero va a imprimir y después va a sumar. La forma correcta de usarlo sería ++numero para que primero sume y después imprima

---------------------------------------------------------------------------------

				CADENAS DE CARACTERES

vamos a ver propiedades y métodos

Propiedades:

	.length muestra el largo

Métodos: 

	-no modifican la cadena original
	- [,parametro] es un parametro opcional

	.toUpperCase() devuelve la cadena en mayúsculas
	.toLowerCase() devuelve la cadena en minúsculas
	.indexOf("cadena a buscar") me devuelve la posición de la cadena a buscar en la cadena original
	.replace(valor a buscar, valor a reemplazar) reemplaza cadenas dentro de la cadena a la cuál se le aplica
	.substring(inicio [,fin]) extrae los caracteres desde el inicio hasta el fin. El parámetro fin es opcional.
Ej:	.substring(3,7) devuelve una cadena con los caracteres que estén entre 3 y 7 en la cadena original.
	.slice(inicio [,fin]) hace lo mismo que substring, pero admite caracteres negativos para marcar que empiece de derecha a izquierda o que ignore los últimos caracteres
	.trim() elimina espacios al inicio y al final de una cadena.
Métodos ECMAS 6
	.startsWith(valor [,inicio]) Sirve para saber si una cadena empieza con ese valor, devuelve un booleano.
	.endsWith(valor [,longitud]) Sirve para saber si la cadena termina con ese valor, devuelve un booleano. La longitud marca cuantos caracteres queremos analizar, los n primeros caracteres.
	.includes(valor [,inicio]) Hace lo mismo que .indexOf() pero devuelve un booleano en vez de la posición
	.repeat(n) devuelve un string que repite n cantidad de veces el original.

Template Strings: se usan para no andar concatenando, sino reservar un espacio en el string previamente. Lo que se meta dentro, se puede ejecutar."Es como un hueco para incluir en un string cualquier cosa que sea válida en javascript"

Ejemplos de Template Strings	

	ejemplo1	`esto es una plantilla para mostrar el numero ${numero} sin concatenar`

	ejemplo2	`El usuario ${nombre} ${apellido} se ha unido al chat`

Link para aprender todo sobre strings: https://www.w3schools.com/jsref/jsref_obj_string.asp
---------------------------------------------------------------------------------
				Objeto Math
Se utiliza para operaciones matemáticas específicas. Es un objeto estático, tenemos que utilizar su nombre para acceder a sus métodos y propiedades. No podemos construir otro objeto de la misma clase.

Propiedades:
	Math.E
	Math.Pi

Métodos:
	.abs(x) devuelve el valor absoluto de x
	.ceil(x) devuelve el entero más pequeño mayor o igual que un número
	.floor(x) devuelve el entero más grande menor o igual que un número
	.pow(x,y) devuelve x^y
	.random() genera un número pseudoaleatorio entre 0 y 1
	.round(x) devuelve el valor de un número redondeado al entero más cercano
	.sign(x) devuelve -1, 0 o 1 según el signo de x

Número aleatorio entre 0 y 100
	Math.round( Math.random() * 100) )

Número aleatorio entre 5 y 10
	Math.round( Math.random() * (10-5) + 5 )
En forma genérica...
	Math.round( Math.random() * (max-min) + min )

---------------------------------------------------------------------------------

				Condicionales
			 (Estructuras de Selección)

Veremos las estructuras de control if, switch y el operador ternario ?

-------------------------

if(condición) 1sentencia;

-------------------------

if(condición) sentencia1
else sentencia2;

-------------------------
if(condición){
	sentencia1;
	sentencia2;
	...;
}

-------------------------

if(condición){
	sentencia1;
	sentencia2;
	...;
}else{
	sentencia3;
	sentencia4;
	...;
}

-------------------------

if(condición){
	sentencia1;
	sentencia2;
	...;
}else if(condición2){
	sentencia3;
	sentencia4;
	...;
}else{
	sentencia5;
	sentencia6;
	...;
}

-------------------------

switch (variable) {
	case valor1:
		sentencias;
		break;
	case valor2:
		sentencias;
		break;
	default:
		sentencias;
}

-------------------------

switch (variable) {
	case valor1:
	case valor2:
	case valor3:
		sentencias;
		break;
	default:
		sentencias;
}

-------------------------------------------------
		Operador Ternario

	(condición) ? casoVerdadero : casoFalso ;

Ejemplo:

let num = prompt("Ingrese un número y le digo si es par o impar");

(num%2 == 0) ? console.log(`${num} es par`) : console.log(`${num} es impar`);

---------------------------------------------------------------------------------
				    Bucles
			 (Estructuras de repetición)

Vamos a ver los bucles while / do while / for / for of / for in
Con ECMAS 6 llegaron los bucles for of y for in y también la palabra reservada continue para saltar ciclos sin romper arrays.
Con break; salgo del ciclo.
Con continue; paso al ciclo siguiente sin terminar lo que estaba haciendo.

------------------
while(condición){
	codigo;
	codigo;
}
------------------
do{
	codigo;
	codigo;
}while(condición)
----------------------
for(let i=0;i<10;i++){
	codigo;
	codigo;
}
------------------------------
//for of
for (let elemento of array){
	console.log( elemento );
}
//usamos el elemento

-------------------------------------
//for in
for (let indice in array){
	console.log( array[indice] );
}

//for in es más usado para objetos.
//usamos el índice

---------------------------------------------------------------------------------

				Entrada y salida de datos

				Entrada de datos
//Ingresar dato por ventana con mensaje
let a = prompt('Introduzca un número');


				Salida de datos
//Sacar datos por una ventana
alert(string);

//Imprimir en consola
console.log(variable);

//escribir en html conociendo el id del elemento a modificar
document.getElementById("id del elemento html").innerHTML = string;

//escribir en html conociendo el id del elemento a modificar
id.textContent= string;


---------------------------------------------------------------------------------

				Arrays

Son estructuras que nos permiten almacenar varios datos y agruparlos.
Se pueden llenar con cualquier tipo de dato válido de javascript y deben ir separados por comas.
Se pueden mezclar tipos de datos, pero no es recomendable.
Se declaran con [ ]
Pueden declararse vacíos o con un contenido establecido.
Pueden añadirse o eliminarse elementos cuando queramos, no tienen longitud definida. Se comportan como listas de otros lenguajes de programación.

let numeros=[];

numeros=[1,2,3,4,5];

console.log(numeros[4]);	//imprime el 5

Propiedades:
	.length devuelve el número de posiciones que tiene el array

Métodos:
	//Métodos con el objeto Array
	Array.isArray(variable a evaluar) //devuelve si la variable es array

	//Métodos para eliminar elementos
	.shift() //elimina y devuelve el primer elemento
	.pop() //elimina y devuelve el último elemento

	//Métodos para añadir elementos
	.push(elemento1,elemento2,...) //añade uno o más elementos al final y devuelve la nueva longitud.
	.unshift(elemento1,elemento2,...) //añade uno o más elementos al comienzo y devuelve la nueva longitud.

	//Métodos de búsqueda. Si no encuentra, devuelve -1
	.indexOf(valor)	//me devuelve el primer índice del elemento que coincida con el valor especificado
	.lastIndexOf(valor) //me devuelve el último índice del elemento que coincida con el valor especificado

	//Otros métodos
	.reverse() da vuelta el array, modifica el original
	.join(string) devuelve un string con un separador que por defecto son comas. Se puede pasar por parámetro un string para que tenga otro separador.
	.splice(a,b,items) elimina y agrega elementos
	//a: desde donde empiezo
	//b: ¿cuantos elementos elimino?
	//items: elementos para agregar
	Ejemplos
		splice(3) elimina desde la posición 3 hasta el final
		splice(2,2) desde la posición 2, elimina 2 elementos
		splice(2,2,45,23,10) borra 2 numeros e inserta 3
		splice(6,0,'fede') en la posición 6 borro 0 elementos e inserto 'fede'
	.slice(a,b) extrae elementos de un array desde a hasta b
