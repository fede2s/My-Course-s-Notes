Lenguaje case sensitive
Lenguaje de tipado dinámico (los tipos de datos pueden cambiar)
Reservo variables con let, anteriormente se reservaba con var, pero da problemas en bucles.
Guardo constantes con const, el identificador por convención va en mayúsculas

Si uso los operadores numero++ dentro de un console.log, primero va a imprimir y después va a sumar. La forma correcta de usarlo sería ++numero para que primero sume y después imprima

Unir javascript a un archivo HTML: usamos la etiqueta script y el atributo src="dirección de mi script.js". Esta etiqueta se pone por recomendación al final del body, justo antes del cierre de etiqueta.
Ejemplo
<body>
	...
	...
	<script src="mi script.js"></script>
</body>

Antiguamente se ponía el atributo type="text/javascript", pero con ECMAScript 6 ya no es necesario.

---------------------------------------------------------------------------------

			    Entrada y salida de datos


				Entrada de datos


Ingresar dato por ventana con mensaje

	let a = prompt('Introduzca un número');




				Salida de datos


Sacar datos por una ventana
	alert(string);


Imprimir en consola
	console.log(variable);


Escribir en html conociendo el id del elemento a modificar
	document.getElementById("id del elemento html").innerHTML = string;


Escribir en html conociendo el id del elemento a modificar
	id.textContent= string;


---------------------------------------------------------------------------------

				CADENAS DE CARACTERES

Link para aprender todo sobre strings: https://www.w3schools.com/jsref/jsref_obj_string.asp

vamos a ver propiedades y métodos

				    Propiedades

	.length muestra el largo


				     Métodos 
Notas:
	-no modifican la cadena original
	- [,parametro] es un parametro opcional




.toUpperCase()		Devuelve la cadena en mayúsculas


.toLowerCase()		Devuelve la cadena en minúsculas


.indexOf("cadena a buscar")
indexOf me devuelve la posición de la cadena a buscar en la cadena original


.replace(valor a buscar, valor a reemplazar)
Reemplaza cadenas dentro de la cadena a la cuál se le aplica


.substring(inicio [,fin])
Extrae los caracteres desde el inicio hasta el fin. El parámetro fin es opcional.
Ejemplo:   .substring(3,7)
Devuelve una cadena con los caracteres que estén entre 3 y 7 en la cadena original.


.slice(inicio [,fin])
Hace lo mismo que substring, pero admite caracteres negativos para marcar que empiece de derecha a izquierda o que ignore los últimos caracteres


.trim()
Elimina espacios al inicio y al final de una cadena.

			----------------------------------

				 Métodos ECMAS 6

.startsWith(valor [,inicio]) 
Sirve para saber si una cadena empieza con ese valor, devuelve un booleano.


.endsWith(valor [,longitud]) 
Sirve para saber si la cadena termina con ese valor, devuelve un booleano. La longitud marca cuantos caracteres queremos analizar, los n primeros caracteres.


.includes(valor [,inicio]) 
Hace lo mismo que .indexOf() pero devuelve un booleano en vez de la posición


.repeat(n) 
Devuelve un string que repite n cantidad de veces el original.


			----------------------------------

				Template Strings

Se usan para no andar concatenando, sino reservar un espacio en el string previamente. Lo que se meta dentro, se puede ejecutar."Es como un hueco para incluir en un string cualquier cosa que sea válida en javascript"

Ejemplos de Template Strings	

	ejemplo1	`esto es una plantilla para mostrar el numero ${numero} sin concatenar`

	ejemplo2	`El usuario ${nombre} ${apellido} se ha unido al chat`


---------------------------------------------------------------------------------

				Objeto Math

Se utiliza para operaciones matemáticas específicas. Es un objeto estático, tenemos que utilizar su nombre para acceder a sus métodos y propiedades. No podemos construir otro objeto de la misma clase.

Propiedades:
	Math.E
	Math.Pi

Métodos:
	.abs(x) devuelve el valor absoluto de x
	.ceil(x) devuelve el entero más pequeño mayor o igual que un número
	.floor(x) devuelve el entero más grande menor o igual que un número
	.pow(x,y) devuelve x^y
	.random() genera un número pseudoaleatorio entre 0 y 1
	.round(x) devuelve el valor de un número redondeado al entero más cercano
	.sign(x) devuelve -1, 0 o 1 según el signo de x

Número aleatorio entre 0 y 100
	Math.round( Math.random() * 100) )

Número aleatorio entre 5 y 10
	Math.round( Math.random() * (10-5) + 5 )
En forma genérica...
	Math.round( Math.random() * (max-min) + min )

---------------------------------------------------------------------------------

				Condicionales
			 (Estructuras de Selección)

Veremos las estructuras de control if, switch y el operador ternario ?

-------------------------

if(condición) 1sentencia;

-------------------------

if(condición) sentencia1
else sentencia2;

-------------------------
if(condición){
	sentencia1;
	sentencia2;
	...;
}

-------------------------

if(condición){
	sentencia1;
	sentencia2;
	...;
}else{
	sentencia3;
	sentencia4;
	...;
}

-------------------------

if(condición){
	sentencia1;
	sentencia2;
	...;
}else if(condición2){
	sentencia3;
	sentencia4;
	...;
}else{
	sentencia5;
	sentencia6;
	...;
}

-------------------------

switch (variable) {
	case valor1:
		sentencias;
		break;
	case valor2:
		sentencias;
		break;
	default:
		sentencias;
}

-------------------------

switch (variable) {
	case valor1:
	case valor2:
	case valor3:
		sentencias;
		break;
	default:
		sentencias;
}

-------------------------------------------------

		Operador Ternario

	(condición) ? casoVerdadero : casoFalso ;

Ejemplo:

let num = prompt("Ingrese un número y le digo si es par o impar");

(num%2 == 0) ? console.log(`${num} es par`) : console.log(`${num} es impar`);

---------------------------------------------------------------------------------

				    Bucles
			 (Estructuras de repetición)

Vamos a ver los bucles while / do while / for / for of / for in
Con ECMAS 6 llegaron los bucles for of y for in y también la palabra reservada continue para saltar ciclos sin romper arrays.
Con break; salgo del ciclo.
Con continue; paso al ciclo siguiente sin terminar lo que estaba haciendo.

------------------
while(condición){
	codigo;
	codigo;
}
------------------
do{
	codigo;
	codigo;
}while(condición)
----------------------
for(let i=0;i<10;i++){
	codigo;
	codigo;
}
------------------------------

	Bucle for of

for (let elemento of array){
	console.log( elemento );
}
//usamos el elemento
//Se usa para imprimir arrays

-------------------------------------

	Bucle for in

for (let indice in array){
	console.log( array[indice] );
}

//for in es más usado para objetos.
//usamos el índice

---------------------------------------------------------------------------------

				     Arrays

Son estructuras que nos permiten almacenar varios datos y agruparlos.
Se pueden llenar con cualquier tipo de dato válido de javascript y deben ir separados por comas.
Se pueden mezclar tipos de datos, pero no es recomendable.
Se declaran con [ ]
Pueden declararse vacíos o con un contenido establecido.
Pueden añadirse o eliminarse elementos cuando queramos, no tienen longitud definida. Se comportan como listas de otros lenguajes de programación.

let numeros=[];

numeros=[1,2,3,4,5];

console.log(numeros[4]); //imprime el 5

Propiedades:

.length 
Devuelve el número de posiciones que tiene el array


Métodos:

			Métodos con el objeto Array

Array.isArray(variable a evaluar) 	
Devuelve si la variable es array




			Métodos para eliminar elementos


.shift() 
Elimina y devuelve el primer elemento

.pop()
Elimina y devuelve el último elemento




			Métodos para añadir elementos

.push(elemento1,elemento2,...) 
Añade uno o más elementos al final y devuelve la nueva longitud.

.unshift(elemento1,elemento2,...)
Añade uno o más elementos al comienzo y devuelve la nueva longitud.




		Métodos de búsqueda. Si no encuentra, devuelve -1
	
.indexOf(valor)	
Me devuelve el primer índice del elemento que coincida con el valor especificado

.lastIndexOf(valor) 
Me devuelve el último índice del elemento que coincida con el valor especificado




				Otros métodos

.reverse() 	
Da vuelta el array, modifica el original

.join(string) 
Devuelve un string con un separador que por defecto son comas. Se puede pasar por parámetro un string para que tenga otro separador.

.splice(a,b,items) 
Elimina y agrega elementos
a: ¿desde donde empiezo?
b: ¿cuantos elementos elimino?
items: elementos para agregar
Ejemplos:
	.splice(3) elimina desde la posición 3 hasta el final
	.splice(2,2) desde la posición 2, elimina 2 elementos
	.splice(2,2,45,23,10) borra 2 numeros e inserta 3
	.splice(6,0,'fede') en la posición 6 borro 0 elementos e inserto 'fede'
	.slice(a,b) extrae elementos de un array desde a hasta b

---------------------------------------------------------------------------------

				     Funciones

Son fragmentos de código que escribimos para ejecutar una tarea y no volver a escribir el código más de una vez.
Utilizarlas nos ayuda a modularizar el código
Las funciones deben realizar una sola tarea

¿Cómo se escribían las funciones en javascript anteriormente?

	function nombreFuncion(parametro1, parametro2){
		//Codigo a ejecutar
		return loQueDevuelve
	}

¿Cómo se escriben ahora las funciones en javascript?

	const nombreFuncion = (parametro1, parametro2) => {
		//Codigo a ejecutar
		return loQueDevuelve
	}

En las funciones flecha, si solo hay un parámetro, los paréntesis se pueden omitir.
Tanto los parámetros como lo que devuelve la función son opcionales.
Con funciones flecha, si no hace nada y solo devuelve los parametros, podemos poner lo que retorna después de la flecha.
Ejemplo:
	const nombreFuncion = (parametro1, parametro2) => parametro1+parametro2 ;

	const saludar = () => console.log("Hola") ;
	const saludarUsuario = (nombre) => console.log(`Hola ${nombre}`) ;

---------------------------------------------------------------------------------

				Objetos

Un objeto es una estructura de datos que representa propiedades, valores y acciones o comportamientos que puede realizar el objeto.
Los objetos tienen propiedades o atributos
En forma genérica las propiedades se representan como pares de claves y valores, es decir...
	clave : valor
	key : value
Un ejemplo...

	let objeto={
		color : rojo,
		altura: 1.8,
		nombre: "Fede",
	}

Para acceder a las propiedades o a los métodos se utiliza el nombre del objeto, un punto y la propiedad o método al cual queremos acceder.
	persona.nombre;		//accedo a una propiedad
	persona["nombre"];	//accedo a una propiedad
	persona.caminar();	//accedo a un método

Puedo imprimir cada valor de un objeto a mano, pero hay una forma mejor que es con los bucles for in

for (const clave in objeto){
	console.log(clave);	//imprime la clave. EJ: "nombre"
	console.log(objeto[clave]); //imprime el valor. EJ: "Fede"
}

Podemos observar, que dentro de un ciclo for in, las claves se manejan como strings, porque nos dejan acceder a los valores de una propiedad usando corchetes. Siempre que usemos corchetes para acceder al valor de una propiedad, dentro de esos corchetes tiene que ir un string, entonces clave dentro del bucle es de tipo string.

Si tuvieramos un array dentro de nuestro objeto y quisieramos imprimirlo, podríamos usar el método .join() para convertir en string al array y separarlo por comas.

		-------------------------------------

			        Clases

En la programación orientada a objetos, los temas claves a aprender son: clase, herencia, objeto, método, evento, etc.
Una clase es una plantilla que sirve como molde para crear objetos.
En javascript, hasta ECMAS 6 no teníamos clases, la forma para crear plantillas era más tosca.
Cuando creamos un objeto, a esa acción se la denomina instanciar un objeto.
Las clases necesitan una función constructora, es obligatorio que se llame constructor.
Por convención, el nombre de la clase va con mayúscula.

class Persona {

	constructor(nombre,apellido,edad){

		this.nombre=nombre;
		this.apellido=apellido;
		this.edad=edad;

	}

}

this hace referencia al objeto que creamos. Por cada this que agregue, el objeto tendrá otra propiedad.
Los objetos pueden tener funciones asociadas a él. En este caso se les denomina MÉTODOS.

class Persona {
	constructor(nombre,apellido,edad){
		this.nombre=nombre;
		this.apellido=apellido;
		this.edad=edad;
	}
	
	saludar(){
		return `Hola, me llamo ${this.nombre} y tengo ${this.edad} años`;
	}
}

Para instanciar un objeto, usamos la palabra reservada NEW

let persona1 = new Persona("Fede","dos Santos",24);




			Desestructuración de Objetos

//---Ejemplo feo de objeto-------
const Persona = {
	nombre : 'Pepe',
	edad: 45,
	casado: true,
	hijo : {
		nombrehijo:'Juan';
	}
}//------------------------------

Si yo tengo un objeto, puedo extraer sus campos para constantes o variables y no tener que usar la notación del punto
Ejemplo:
	const {nombre,edad} = Persona;
Importante: el nombre de las constantes o variables que extraigo debe ser el mismo nombre que las claves o keys que deseo extraer del objeto.
Si tengo objetos dentro de objetos, puedo ir accediendo también
	const {nombrehijo} = Persona.hijo;

---------------------------------------------------------------------------------

				Arrays Parte 2

			     Métodos más complejos

.from(iterable)
convierte en array un objeto iterable (que se puede recorrer). Ejemplos: string, array. Se usa para el DOM. Es parecido a .split()


.sort([callback])
Ordena los elementos de un array alfabéticamente según el valor UNICODE, si le pasamos un callback (función) ordena en función del algoritmo que le pasemos

Ejemplo de método .sort()

	let letras=['b','c','z','a'];
	console.log(letras.sort());
	//Muestra ['a','b','c','z']

	let numeros=[1,8,100,300,3];
	console.log(numeros.sort());
	//muestra [1,100,3,300,8] porque ordena según la tabla unicode
	console.log(numeros.sort(  (a,b) => a-b  )  );
	//muestra [1,3,8,100,300]
	console.log(numeros.sort(  (a,b) => b-a  )  );
	//muestra [300,100,8,3,1]
	
			----------------------------------

.forEach(callback(currentValue,[index]))
Ejecuta la función indicada una vez por cada elemento del array. Index es opcional.
Es otro tipo de bucle que tenemos en javascript y lo que recibe es un callback y también puede recibir otra cosa después del callback que sería el argumento this
Ejemplo:
	const listaDeNumeros=[12,25,47,84,98]
	listaDeNumeros.forEach((elementoDeLaLista)=>console.log(elementoDeLaLista))
	listaDeNumeros.forEach((elementoDeLaLista,index)=>console.log(`${elementoDeLaLista} está en la posición ${index}`))

			----------------------------------
.some(callback)
Comprueba si al menos un elemento del array cumple la condición

.every(callback)
Comprueba si todos los elementos del array cumplen la condición

.some() y .every() funcionan muy parecido
Ejemplo:
	const palabras=["Hola","mundo"];
	palabras.some(palabrita=>palabrita.length>2);
	//Devuelve si al menos 1 palabra tiene más de 2 letras

			----------------------------------
.map(callback)
Transforma todos los elementos del array y devuelve un nuevo array

.filter(callback)
Filtra todos los elementos del array que cumplan la condición y devuelve un nuevo array

.reduce(callback)
Reduce todos los elementos del array a un único valor

Estos 3 métodos son importantes porque me evitan usar bucles for, son más cómodos. Estos métodos recorren un array y devuelven un nuevo array salvo el método reduce() que devuelve un único valor.
Ejemplos:

	const listaDeNumeros=[12,25,47,84,98];
	const listaTransformada=listaDeNumeros.map((numero)=>(numero*2));
	console.log(listaTransformada);
	
		//...es equivalente a...//
	for(const numbero of listaDeNumeros){
		console.log(numero*2);
	}

	const listaFiltrada = listaDeNumeros.filter(numerito=>numerito>40);

	const sumaTotal = listaDeNumeros.reduce ( (a,b) => (a+b) );
	//Me devuelve la sumatoria de números de la lista, o sea, 266

Si tuviera un array de objetos usuario donde un parámetro es online : true or false...
	const usuariosOnline = usuarios.reduce((cont,usuario) = > {
		if (usuario.online) cont++;
		return cont;
	},0)
Esto recorre la lista de usuarios y cuenta cuantos hay online

---------------------------------------------------------------------------------

				Spread Operator
			    (Operador de expansión)

Se escribe como 3 puntitos suspensivos ...
Lo que hace es expandir el contenido de un array

console.log(numeros); 		//imprime [1,2,3]
console.log(...numeros);	//imprime 1 2 3

Se usa para:
	-Enviar elementos de un array a una función
	-Añadir un array a otro array
	-Copiar arrays
	-Concatenar arrays
	-Enviar un número indefinido de argumentos a una función (parámetros REST)
	-Librería math
	-Eliminar elementos duplicados




		  Enviar elementos de un array a una función

Si tengo una función que recibe 3 parámetros y le quiero pasar los valores de una lista de 3 elementos, llamo a la función y como parámetro le paso el spread operator y la lista.

	const lista=[1,2,3]
	sumar(...lista);

Si yo no uso el spread operator, me va a tomar que le estoy pasando 1 solo elemento y no va a funcionar.




			   Añadir un array a otro array

Si tengo una lista de usuarios y quiero agregarle los valores de una lista de nuevos usuarios, tengo que usar el método push. Como no sé cuantos usuarios nuevos voy a agregar, podría usar un for y length, pero más fácil es hacer un push con el spread operator.

	usuarios.push(...nuevosUsuarios);

Si quisiera agregarlos al principio de la lista, en vez de al final, tendría que hacer lo mismo, pero con el método unshift()

	usuarios.unshift(...nuevosUsuarios);

Si quisiera agregarlos en el medio, en tal posición sin borrar otros elementos, puedo usar el método splice()

	usuarios.splice(2,0,...nuevosUsuarios);

Puedo usar cualquiera de los métodos vistos de strings para agregar o quitar elementos, pero acá lo interesante es agregar elementos de un string a otro.




				   Copiar arrays

Podemos hacerlo de 2 formas

	const array2 = array1;
o...
	const array2 = [...array1];




				 Concatenar arrays

Ya conocemos una forma de concatenar arrays usando métodos y es la siguiente

	arraysConcatenados=array1.concat(array2);

Ahora vamos a ver una mejor forma

	arraysConcatenados=[...array1,...array2];




			  Número Indefinido de Parámetros
				 (Parámetros Rest)

Cuando llamamos a una función desde una API, no siempre conocemos cuántos parámetros tendrán, entonces para crear una función que reciba cualquier cantidad de parámetros usamos el spread operator.

	const miFuncion = (...parametros) => {
		//codigo
	}

Los parámetros de mi función estarán dentro de un arreglo llamado parametros.




				Librería math

Hay métodos del objeto math que ya conocemos y que su problema es que funcionan con un número indefinido de parámetros. Como vimos anteriormente, el spread operator me sirve para pasar elementos de una lista como parámetros de una función.

	Math.max(3,7,4);	//devuelve 7
	let numeritos = [3,7,4]
	Math.max(...numeritos);	//devuelve 7

Acá lo interesante es que si yo agrego números a mis lista, puedo seguir utilizando el método math, pero ahora aplicado con más parámetros




			Eliminar elementos duplicados

Para esto usaremos el constructor Set que no permite elementos duplicados y lo vamos a transformar a array.

	arraySinDuplicados=[...new Set(arrayConDuplicados)];


---------------------------------------------------------------------------------

					DOM
			       (Document Object Model)

				    Introducción

Se considera DOM a toda la estructura html del documento. No es javascript, es simplemente una API (Aplication Programing Interface) que se utiliza a través de javascript. Es importante conocer cómo interactuar con el DOM, ya que es para lo que más usaremos javascript.
Cada parte del árbol del documento es un NODO. Pueden ser etiquetas, atributos o contenidos de etiqueta.

Hay varios tipos de nodos, los más utilizados son:

	-Element node 	(número 1): Cualquier etiqueta HTML
	-Text node 	(número 3): El contenido de la etiqueta
	-Comment node 	(número 8): Cualquier comentario en HTML




Con seleccionar un elemento en el inspector de contenido del navegador y escribir en consola $0 podemos acceder a él y ver todo el contenido del elemento.

	$0.id		me devuelve el id
	$0.textContent 	me devuelve el contenido de la etiqueta
	$0.nodeType	me devuelve el número del tipo de nodo
	$0.nodeName	me devuelve el nombre de etiqueta en mayúsculas

  ¡¡¡Las etiquetas, cuando trabajamos con el DOM, siempre van en mayúsculas!!!

Con $0 y el punto, podemos acceder a un montón de elementos que tiene ese nodo, incluso a los nodos hijos, será necesario para esto siempre abrir la consola, seleccionar el elemento y escribir $0 para que imprima el elemento y al hacer click desplegar todos sus elementos.




	     ¿Cómo accedemos a los elementos del DOM (a los nodos)?


Acceder a un elemento a través de su id:

	document.getElementById('id')


Acceder solo al primer elemento que coincida con el selector css:

	document.querySelector('selectorCSS')


Acceder a todos los elementos que conicidan con el selector css:

	document.querySelectorAll('selectorCSS')     //Esto devuelve un nodelist

Ej1:	document.querySelectorAll(".parrafo"); //las clases css llevan puntito
Ej2:	document.querySelectorAll("span"); //los estilos de etiqueta no llevan .


Estos métodos para acceder a nodos se pueden combinar para tener mayor precisión
	document.getElementById("titulo").querySelector("span")
	//accede a una etiqueta <span> dentro de una etiqueta de id="titulo"




Los elementos siempre se guardan en una constante, porque el elemento no va a cambiar. Lo que sí podemos cambiar, son sus propiedades.
Ejemplo:
	const titulo = document.getElementById("titulo");

Si hacemos un console.log del elemento del DOM, obtenemos lo mismo en consola que usando $0, vemos todas sus propiedades.




Modificar contenido de etiqueta accedida:

	const titulo = document.getElementById("titulo");
	titulo.textContent = "Nuevo título modificado en javascript";

textContent es una propiedad que nos permite leer y editar. Si solo pusieramos titulo.textContent, nos mostraría el contenido de la etiqueta con id título que previamente accedimos usando document.getElementById('titulo')





Modificar estilo de una clase

	const parrafos = document.querySelectorAll("parrafo");
	parrafos[0].style.color = "red";
	//Modifico el primer nodo de la lista de nodos devuelta




¡¡¡Una lista de nodos no es un array!!!
Podemos utilizar el spread operator para transformar la lista en un array

	const arrayDeParrafos = [ ... document.querySelectorAll("parrafo") ];
	arrayDeParrafos.map( p => p.style.color = "green");

Ahora sí se modifican todos los párrafos
El spread operator en este caso puede darnos problemas con algunas versiones de firefox y con safari. Con internet explorer seguro que también.
La alternativa para esto sería...
	
	const arrayDeParrafos = Array.from(document.querySelectorAll("parrafo"));


		    -------------------------------------------

		    Modificar clases y atributos con javascript

Primero obtenemos el elemento:
	const elemento = document.getElementById('id');

Atributos

	element.getAttribute('attribute')
	element.setAttribute("attribute", value)

Clases

	element.classList.add('class','class, ...)
	element.classList.remove('class','class', ...)
	element.classList.toggle('class'[,force]) 
	element.classList.contains('class')
	element.classList.replace('oldClass', newClass)

-toggle: si tiene la clase la quita y, si no la tiene, se la pone. Se usa muchísimo en los menús de móvil. Force añade clases independientemente de si el método toggle devolvió true o false.
-contains: devuelve true o false en función de si tiene la clase o no

¿Por qué usar .classList.replace() en vez de cambiar el estilo con .style.propiedadcss?
Porque cuando el código crece, se hace insostenible el andar peleando contra el código css escrito en línea de html y cuando modifico propiedades con elemento.style.propiedadDeCSS, modifico el html directamente en vez de modificar la clase.

Atributos directos (podemos acceder sin desplegar al usuar $0

	id
	value
	innerHTML (ya lo vimos)
	textContent (ya lo vimos)

-Value es para validar formularios.
-innerHTML abarca las etiquetas dentro del elemento, textContent extrae el texto sin etiquetas.
Ejemplo:
<p id="ej">
	Diferencia entre <span>uno y otro</span>
</p>

	elemento=document.getElementById('ej');
	console.log(elemento.innerHTML);
	//imprime: Diferencia entre <span>uno y otro</span>
	console.log(elemento.textContent);
	//imprime: Diferencia entre uno y otro

			--------------------------------

				    Eventos

* Página con listado completo de eventos: https://developer.mozilla.org/es/docs/Web/Events
* Un evento es cualquier cosa que sucede en nuestro documento
* Tenemos muchos tipos de eventos y no siempre los ejecuta el usuario
* Hay eventos que se ejecutan simplemente por abrir una página. Ej: leer un elemento, que carguen todos los elementos...
	-El contenido se ha leido
	-El contenido se ha cargado
	-El usuario mueve el ratón
	-El usuario pulsa una tecla
	-La ventana se ha cerrado
	-etc.

* Hasta hace unos años, los eventos se trataban de esta forma:
	<p onclick="funcion()">activar función</p>
... se ponía el evento como atributo del html.

Esto es algo que a día de hoy ya no se hace y no se recomienda porque estamos mezclando lenguajes por temas de mantenimiento y compatibilidad. También si queríamos utilizar varios eventos, era más complicado de detectar errores.

* En ANGULAR se ve hecho así:
	<p (click)="funcion()">activar función</p>

* En Javascript lo haremos así:
	Element.addEventListener('event', callback);

Ejemplo con click
	const boton = document.getElementById("miBoton");
	boton.addEventListener("click", () => {
		console.log("Hiciste click");
	}

			---------------------------

			      Eventos de ratón

click		cuando pulsamos el botón izquierdo del ratón
dbclick 	cuando pulsamos 2 veces seguidas el botón izquierdo del ratón
mouseenter	cuando entramos en la zona que tiene el evento
mouseleave	cuando salimos de la zona que tiene el evento
mousedown	cuando pulsamos el boton izquierdo del ratón
mouseup		cuando soltamos el botón izquierdo del ratón
mousemove	cuando movemos el ratón

* mouseup y mousedown ayudan bastante cuando usamos la API de drag and drop
* mousemove ejecuta una función mientras mueva el mouse dentro del contenedor o elemento de hmtl que mi script esté escuchando.


			      Eventos de teclado

keydown		cuando pulsamos una tecla
keyup		cuando soltamos una tecla
keypress 	cuando la pulsamos y no la soltamos

---------------------------------------------------------------------------------

				Librería Axios

Axios es una librería basada en promesas para el cliente y para el servidor. Esta librería pesa solo 13k así que no repercute en la carga de la página como sí lo hace jquery. Algo importante es que tiene transformación automática cuando hacemos peticiones JSON. Podemos usar fetch/XMLHTTP request/Axios, los 3 hacen lo mismo. Lo importante es que esta librería tiene promesas y tiene soporte para internet explorer 11. 
Axios es la mejor opción si nuestro único objetivo es hacer peticiones a una API REST, por ejemplo, para traer datos.
Para utilizarla, lo único que tenemos que hacer es copiar el siguiente link en HTML encima de nuestro script para que siempre funcione
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>

Axios es un método que recibe un objeto igual a las peticiones POST que hacíamos con fetch y como parámetros el objeto recibe el método GET y la url a la que vamos a hacer la petición

			------------------------------

  Ejemplito sencillo para visualizar todo lo que nos devuelve la librería axios

button.addEventListener('click', () => {
	axios ({
		method: 'GET',
		url: 'https://jsonplaceholder.typicode.com/users'
	}).then (res =>{
		console.log(res); 	//imprime todo
		console.log(res.data); 	//imprime los datos que nos interesan
	}).catch (err => console.log(err))	//imprime error
})

Dentro de then ponemos todo lo que queremos que haga ni bien obtenga los datos. Dentro de catch ponemos todo lo que queremos que haga si hubo un error.

			------------------------------

			Ejemplo de impresión de lista

button.addEventListener('click', () => {
	axios ({
		method: 'GET',
		url: 'https://jsonplaceholder.typicode.com/users'
	}).then ( res => {
		const list = document.getElementById('list')
		const fragment = document.createDocumentFragment()
		for (const userInfo of res.data) {
			const listItem = document.createElement('LI')
			listItem.textContent= `${userInfo.id}-${userInfo.name}`
			fragment.appendChild(listItem)
		}
		list.appendChild(fragment)
	}).catch (err => console.log(err))	//imprime error
})

				En el <body> de HTML...

	<h1 id="title">Axios</h1>
	<button id="button">Get Data</button>
	<ul id="list"></ul>
	<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
	<script src="script.js"></script>

			------------------------------